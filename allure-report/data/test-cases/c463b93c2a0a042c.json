{
  "uid" : "c463b93c2a0a042c",
  "name" : "Validate schema type of login response",
  "historyId" : "4d53dceb353aa501e364e620a655ea80",
  "time" : {
    "start" : 1605791164404,
    "stop" : 1605791165177,
    "duration" : 773
  },
  "status" : "broken",
  "statusMessage" : "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'validate schema type of expires_in')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then validate schema type of expires_in')\n\n",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'validate schema type of expires_in')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then validate schema type of expires_in')\n\n",
    "steps" : [ {
      "name" : "Given I have login auth credentials",
      "time" : {
        "start" : 1605791164408,
        "stop" : 1605791164411,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I hit login POST request",
      "time" : {
        "start" : 1605791164412,
        "stop" : 1605791165175,
        "duration" : 763
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then validate schema type access_token",
      "time" : {
        "start" : 1605791165175,
        "stop" : 1605791165176,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And validate schema type of expires_in",
      "time" : {
        "start" : 1605791165176,
        "stop" : 1605791165176,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'validate schema type of expires_in')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then validate schema type of expires_in')\n\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    }, {
      "name" : "And validate schema type of token_type",
      "time" : {
        "start" : 1605791165177,
        "stop" : 1605791165177,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'validate schema type of token_type')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then validate schema type of token_type')\n\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "Validates login user"
  }, {
    "name" : "framework",
    "value" : "behave"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "c463b93c2a0a042c.json",
  "parameterValues" : [ ]
}